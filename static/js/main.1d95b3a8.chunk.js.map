{"version":3,"sources":["apis/index.js","states/index.js","components/LeftHeader.js","components/RightBody.js","App.js","reportWebVitals.js","index.js"],"names":["api_url","create_note_url","update_note_url","delete_note_url","notes_state","atom","key","default","searched_notes","selected_note","opened_note","changed","Note","isClicked","index","note","useRecoilState","setOpenedNote","clicked","setClicked","setIsChanges","className","onClick","map","e","i","openNote","title","body","slice","LeftHeader","notes","setNotes","searchedNotes","setSearchedNotes","useState","searchValue","setSearchValue","a","fetch","res","json","console","log","useEffect","getAllNotes","then","Array","length","fill","ns","forEach","indexOf","push","addNotesInSeachedNotes","placeholder","value","onChange","target","id","new_note","Date","now","created_at","new","_","NoNoteOpened","OpenedNote","_title","setTitle","_body","setBody","isChanged","method","headers","JSON","stringify","added","Error","updated","deleted","changed_note","checkchange","icon","faTrashAlt","RightBody","openedNote","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d95b3a8.chunk.js","sourcesContent":["export const api_url = \"http://127.0.0.1:3000/\"\r\n\r\nexport const create_note_url = api_url + \"createnew\"\r\n\r\nexport const update_note_url = api_url + \"update/\"\r\n\r\nexport const delete_note_url = api_url + \"delete/\"\r\n","import { atom } from \"recoil\"\r\n\r\nexport const notes_state = atom({\r\n    key: \"notes\", // unique ID (with respect to other atoms/selectors)\r\n    default: [], // default value (aka initial value)\r\n})\r\nexport const searched_notes = atom({\r\n    key: \"searched_notes\", // unique ID (with respect to other atoms/selectors)\r\n    default: [], // default value (aka initial value)\r\n})\r\nexport const selected_note = atom({\r\n    key: \"selected_note\",\r\n    default: [false, false],\r\n})\r\nexport const opened_note = atom({\r\n    key: \"opened\",\r\n    default: null,\r\n})\r\n\r\nexport const changed = atom({\r\n    key: \"changed\",\r\n    default: false,\r\n})\r\n","import { useEffect, useState } from \"react\"\r\nimport { useRecoilState } from \"recoil\"\r\nimport { api_url } from \"../apis\"\r\nimport {\r\n    notes_state,\r\n    opened_note,\r\n    selected_note,\r\n    changed,\r\n    searched_notes,\r\n} from \"../states\"\r\n\r\nfunction Note({ isClicked, index, note }) {\r\n    const [, setOpenedNote] = useRecoilState(opened_note)\r\n    const [clicked, setClicked] = useRecoilState(selected_note)\r\n    const [, setIsChanges] = useRecoilState(changed)\r\n\r\n    function openNote(note) {\r\n        setOpenedNote(note)\r\n        setClicked(clicked.map((e, i) => (i === index ? true : false)))\r\n        setIsChanges(false)\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={isClicked ? \"note_list highlight\" : \"note_list\"}\r\n            onClick={() => openNote(note)}\r\n        >\r\n            <div className=\"title\">{note.title}</div>\r\n            <div className=\"body\">{note.body.slice(0, 25)}...</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function LeftHeader() {\r\n    const [notes, setNotes] = useRecoilState(notes_state)\r\n    const [searchedNotes, setSearchedNotes] = useRecoilState(searched_notes)\r\n    const [searchValue, setSearchValue] = useState(\"\")\r\n    const [clicked, setClicked] = useRecoilState(selected_note)\r\n    const [, setOpenedNote] = useRecoilState(opened_note)\r\n    const [, setIsChanges] = useRecoilState(changed)\r\n\r\n    function addNotesInSeachedNotes() {\r\n        let ns = []\r\n        notes.forEach((e) => {\r\n            if (\r\n                e.title.indexOf(searchValue) !== -1 ||\r\n                e.body.indexOf(searchValue) !== -1\r\n            ) {\r\n                ns.push(e)\r\n            }\r\n        })\r\n        setSearchedNotes(ns)\r\n        setClicked(new Array(ns.length).fill(false))\r\n    }\r\n\r\n    function createNew() {\r\n        let new_note = {\r\n            title: \"Untitled \" + notes.length,\r\n            body: \"..\",\r\n            id: Date.now(),\r\n            created_at: new Date(),\r\n            new: true,\r\n        }\r\n        setNotes([new_note, ...notes])\r\n        setSearchedNotes([new_note, ...notes])\r\n\r\n        setOpenedNote(new_note)\r\n        setClicked(\r\n            new Array(searchedNotes.length + 1)\r\n                .fill(0)\r\n                .map((_, i) => (i == 0 ? true : false))\r\n        )\r\n        setIsChanges(false)\r\n    }\r\n    async function getAllNotes() {\r\n        try {\r\n            let res = await fetch(api_url)\r\n            let json = await res.json()\r\n            return json\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        // show loading\r\n        getAllNotes().then((json) => {\r\n            // hide loading\r\n            setNotes(json)\r\n            setSearchedNotes(json)\r\n            setClicked(new Array(json.length).fill(false))\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        //do something\r\n        addNotesInSeachedNotes()\r\n    }, [searchValue])\r\n\r\n    // useEffect(() => {}, [notes])\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"search\">\r\n                <input\r\n                    placeholder=\"search note\"\r\n                    value={searchValue}\r\n                    onChange={(e) => setSearchValue(e.target.value)}\r\n                ></input>\r\n            </div>\r\n            <div className=\"all_notes\">\r\n                {searchedNotes.map((note, i) => (\r\n                    <Note\r\n                        key={note.id}\r\n                        note={note}\r\n                        isClicked={clicked[i]}\r\n                        index={i}\r\n                    ></Note>\r\n                ))}\r\n            </div>\r\n            <div className=\"create_new\" onClick={createNew}>\r\n                New\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { useRecoilState } from \"recoil\"\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nimport { create_note_url, delete_note_url, update_note_url } from \"../apis\"\r\n\r\nimport {\r\n    changed,\r\n    notes_state,\r\n    opened_note,\r\n    searched_notes,\r\n    selected_note,\r\n} from \"../states\"\r\n\r\nfunction NoNoteOpened() {\r\n    return <div>No note is selected</div>\r\n}\r\n\r\nfunction OpenedNote({ note }) {\r\n    const [_title, setTitle] = useState(note.title)\r\n    const [_body, setBody] = useState(note.body)\r\n    const [notes, setNotes] = useRecoilState(notes_state)\r\n    const [isChanged, setIsChanges] = useRecoilState(changed)\r\n    const [, setOpenedNote] = useRecoilState(opened_note)\r\n    const [clicked, setClicked] = useRecoilState(selected_note)\r\n    const [searchedNotes, setSearchedNotes] = useRecoilState(searched_notes)\r\n\r\n    useEffect(() => {\r\n        setTitle(note.title)\r\n        setBody(note.body)\r\n    }, [note])\r\n\r\n    useEffect(() => {\r\n        checkchange()\r\n    }, [_title, _body])\r\n\r\n    function checkchange() {\r\n        if (note.title !== _title || note.body !== _body) {\r\n            if (!note.new & !isChanged) {\r\n                setIsChanges(true)\r\n            }\r\n            let changed_note = {\r\n                ...note,\r\n                ...{ changed: true, title: _title, body: _body },\r\n            }\r\n            setNotes(notes.map((e) => (e.id === note.id ? changed_note : e)))\r\n            setSearchedNotes(\r\n                searchedNotes.map((e) => (e.id === note.id ? changed_note : e))\r\n            )\r\n        }\r\n    }\r\n    async function uploadNew() {\r\n        // show loading\r\n        try {\r\n            const res = await fetch(create_note_url, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"content-type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ title: _title, body: _body }),\r\n            })\r\n            const json = await res.json()\r\n            if (json.added) {\r\n                setNotes([json.note, ...notes.slice(1, notes.length)])\r\n                setOpenedNote(json.note)\r\n            } else {\r\n                throw new Error(\"Can't Create new Note\")\r\n            }\r\n            //hide loading\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n    async function updateNote() {\r\n        //show loading\r\n        try {\r\n            let id = note.id\r\n            const res = await fetch(update_note_url + id, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"content-type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ title: _title, body: _body }),\r\n            })\r\n            const json = await res.json()\r\n            if (json.updated) {\r\n                // console.log(json.note)\r\n                setNotes(notes.map((e) => (e.id === note.id ? json.note : e)))\r\n                setOpenedNote(json.note)\r\n                setIsChanges(false)\r\n            } else {\r\n                throw new Error(\"Can't Update\")\r\n            }\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n    async function deleteNote() {\r\n        try {\r\n            if (note.new) {\r\n                setNotes(notes.slice(1, notes.length))\r\n                setSearchedNotes(notes.slice(1, notes.length))\r\n                setOpenedNote(null)\r\n                setClicked(clicked.map((e) => false))\r\n                return\r\n            }\r\n            const id = note.id\r\n            const res = await fetch(delete_note_url + id)\r\n            const json = await res.json()\r\n            if (json.deleted) {\r\n                //do somethin\r\n                setNotes(notes.slice(1, notes.length))\r\n                setSearchedNotes(notes.slice(1, notes.length))\r\n                setOpenedNote(null)\r\n                setClicked(clicked.map((e) => false))\r\n            } else {\r\n                throw new Error(\"Can't delete\")\r\n            }\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"title_wrap\">\r\n                <input\r\n                    className=\"title\"\r\n                    value={_title}\r\n                    onChange={(e) => setTitle(e.target.value)}\r\n                ></input>\r\n                <button className=\"delete\" onClick={deleteNote}>\r\n                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                </button>\r\n            </div>\r\n            <div className=\"line\"></div>\r\n            <textarea\r\n                className=\"body\"\r\n                value={_body}\r\n                onChange={(e) => setBody(e.target.value)}\r\n            ></textarea>\r\n            <button\r\n                className={\r\n                    isChanged || note.changed ? \"show btn\" : \"hidden btn\"\r\n                }\r\n                onClick={updateNote}\r\n            >\r\n                Save Change\r\n            </button>\r\n            <button\r\n                className={note.new ? \"show btn\" : \"hidden btn\"}\r\n                onClick={uploadNew}\r\n            >\r\n                Create\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function RightBody() {\r\n    const [openedNote] = useRecoilState(opened_note)\r\n    return (\r\n        <div className=\"note_body\">\r\n            {openedNote ? <OpenedNote note={openedNote} /> : <NoNoteOpened />}\r\n        </div>\r\n    )\r\n}\r\n","import { RecoilRoot } from \"recoil\"\n\nimport LeftHeader from \"./components/LeftHeader\"\nimport RightBody from \"./components/RightBody\"\n\nimport \"./App.css\"\n\nfunction App() {\n    return (\n        <RecoilRoot className=\"App\">\n            <LeftHeader></LeftHeader>\n            <RightBody></RightBody>\n        </RecoilRoot>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}